# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard Professional Edition IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 4.2.1PE
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2025. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tb_rest_client.api_client import ApiClient


class DashboardReportControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def download_dashboard_report(self, body, dashboard_id, **kwargs):  # noqa: E501
        """Download dashboard report (downloadDashboardReport)  # noqa: E501

        Generate and download a report from the specified dashboard. The request payload is a JSON object with params of report. For example:  ```json {     \"type\": \"pdf\",     \"timezone\": \"Europe/Kiev\",     \"timewindow\": {         \"displayValue\": \"\",         \"hideInterval\": false,         \"hideLastInterval\": false,         \"hideQuickInterval\": false,         \"hideAggregation\": false,         \"hideAggInterval\": false,         \"hideTimezone\": false,         \"selectedTab\": 0,         \"realtime\": {             \"realtimeType\": 0,             \"interval\": 1000,             \"timewindowMs\": 60000,             \"quickInterval\": \"CURRENT_DAY\"         },         \"history\": {             \"historyType\": 0,             \"interval\": 1000,             \"timewindowMs\": 60000,             \"fixedTimewindow\": {                 \"startTimeMs\": 1703687976592,                 \"endTimeMs\": 1703774376592             },             \"quickInterval\": \"CURRENT_DAY\"         },         \"aggregation\": {             \"type\": \"AVG\",             \"limit\": 25000         }     },     \"state\": null } ```   Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_dashboard_report(body, dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str dashboard_id: A string value representing the dashboard id. For example, '784f394c-42b6-435a-983c-b7beff2784f9' (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_dashboard_report_with_http_info(body, dashboard_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_dashboard_report_with_http_info(body, dashboard_id, **kwargs)  # noqa: E501
            return data

    def download_dashboard_report_with_http_info(self, body, dashboard_id, **kwargs):  # noqa: E501
        """Download dashboard report (downloadDashboardReport)  # noqa: E501

        Generate and download a report from the specified dashboard. The request payload is a JSON object with params of report. For example:  ```json {     \"type\": \"pdf\",     \"timezone\": \"Europe/Kiev\",     \"timewindow\": {         \"displayValue\": \"\",         \"hideInterval\": false,         \"hideLastInterval\": false,         \"hideQuickInterval\": false,         \"hideAggregation\": false,         \"hideAggInterval\": false,         \"hideTimezone\": false,         \"selectedTab\": 0,         \"realtime\": {             \"realtimeType\": 0,             \"interval\": 1000,             \"timewindowMs\": 60000,             \"quickInterval\": \"CURRENT_DAY\"         },         \"history\": {             \"historyType\": 0,             \"interval\": 1000,             \"timewindowMs\": 60000,             \"fixedTimewindow\": {                 \"startTimeMs\": 1703687976592,                 \"endTimeMs\": 1703774376592             },             \"quickInterval\": \"CURRENT_DAY\"         },         \"aggregation\": {             \"type\": \"AVG\",             \"limit\": 25000         }     },     \"state\": null } ```   Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_dashboard_report_with_http_info(body, dashboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str dashboard_id: A string value representing the dashboard id. For example, '784f394c-42b6-435a-983c-b7beff2784f9' (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dashboard_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_dashboard_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `download_dashboard_report`")  # noqa: E501
        # verify the required parameter 'dashboard_id' is set
        if ('dashboard_id' not in params or
                params['dashboard_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_id` when calling `download_dashboard_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboard_id' in params:
            path_params['dashboardId'] = params['dashboard_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf', 'image/jpeg', 'image/png', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/report/{dashboardId}/download', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_test_report(self, body, **kwargs):  # noqa: E501
        """Download test report (downloadTestReport)  # noqa: E501

        Generate and download test report.  Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_test_report(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DashboardReportConfig body: (required)
        :param str reports_server_endpoint_url: A string value representing the report server endpoint.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_test_report_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.download_test_report_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def download_test_report_with_http_info(self, body, **kwargs):  # noqa: E501
        """Download test report (downloadTestReport)  # noqa: E501

        Generate and download test report.  Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_test_report_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DashboardReportConfig body: (required)
        :param str reports_server_endpoint_url: A string value representing the report server endpoint.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'reports_server_endpoint_url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_test_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `download_test_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'reports_server_endpoint_url' in params:
            query_params.append(('reportsServerEndpointUrl', params['reports_server_endpoint_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf', 'image/jpeg', 'image/png', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/report/test{?reportsServerEndpointUrl}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
