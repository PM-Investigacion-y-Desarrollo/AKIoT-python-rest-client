# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard Professional Edition IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 4.2.1PE
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2025. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tb_rest_client.api_client import ApiClient


class ReportTemplateControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_report_template(self, report_template_id, **kwargs):  # noqa: E501
        """Delete Report Template (deleteReportTemplate)  # noqa: E501

        Deletes the report template. Referencing non-existing Report Template Id will cause 'Not Found' error.   Security check is performed to verify that the user has 'DELETE' permission for the entity (entities).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_report_template(report_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_template_id: A string value representing the report template id. For example, '784f394c-42b6-435a-983c-b7beff2784f9' (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_report_template_with_http_info(report_template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_report_template_with_http_info(report_template_id, **kwargs)  # noqa: E501
            return data

    def delete_report_template_with_http_info(self, report_template_id, **kwargs):  # noqa: E501
        """Delete Report Template (deleteReportTemplate)  # noqa: E501

        Deletes the report template. Referencing non-existing Report Template Id will cause 'Not Found' error.   Security check is performed to verify that the user has 'DELETE' permission for the entity (entities).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_report_template_with_http_info(report_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_template_id: A string value representing the report template id. For example, '784f394c-42b6-435a-983c-b7beff2784f9' (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['report_template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_report_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'report_template_id' is set
        if ('report_template_id' not in params or
                params['report_template_id'] is None):
            raise ValueError("Missing the required parameter `report_template_id` when calling `delete_report_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'report_template_id' in params:
            path_params['reportTemplateId'] = params['report_template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/reportTemplate/{reportTemplateId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_report_template_infos(self, page_size, page, **kwargs):  # noqa: E501
        """Get All Report Templates for current user (getAllReportTemplateInfos)  # noqa: E501

        Returns a page of report template info objects owned by the tenant or the customer of a current user. Report Templates allows you to create reports according to the report template configuration. Report service uses report template configuration to generate report. See the 'Model' tab of the Response Class for more details.  You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See response schema for more details.   Available for users with 'TENANT_ADMIN' authority. Security check is performed to verify that the user has 'READ' permission for the entity (entities).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_report_template_infos(page_size, page, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: Maximum amount of entities in a one page (required)
        :param int page: Sequence number of page starting from 0 (required)
        :param str type_list: A list of string values separated by comma ',' representing one of the ReportTemplateType enumeration value.
        :param str format_list: A list of string values separated by comma ',' representing one of the TbReportFormat enumeration value.
        :param bool include_customers: Include customer or sub-customer entities
        :param str text_search: The case insensitive 'substring' filter based on the report template name or customer title.
        :param str sort_property: Property of entity to sort by
        :param str sort_order: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
        :return: PageDataReportTemplateInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_report_template_infos_with_http_info(page_size, page, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_report_template_infos_with_http_info(page_size, page, **kwargs)  # noqa: E501
            return data

    def get_all_report_template_infos_with_http_info(self, page_size, page, **kwargs):  # noqa: E501
        """Get All Report Templates for current user (getAllReportTemplateInfos)  # noqa: E501

        Returns a page of report template info objects owned by the tenant or the customer of a current user. Report Templates allows you to create reports according to the report template configuration. Report service uses report template configuration to generate report. See the 'Model' tab of the Response Class for more details.  You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See response schema for more details.   Available for users with 'TENANT_ADMIN' authority. Security check is performed to verify that the user has 'READ' permission for the entity (entities).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_report_template_infos_with_http_info(page_size, page, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: Maximum amount of entities in a one page (required)
        :param int page: Sequence number of page starting from 0 (required)
        :param list type_list: A list of string values separated by comma ',' representing one of the ReportTemplateType enumeration value.
        :param list format_list: A list of string values separated by comma ',' representing one of the TbReportFormat enumeration value.
        :param bool include_customers: Include customer or sub-customer entities
        :param str text_search: The case insensitive 'substring' filter based on the report template name or customer title.
        :param str sort_property: Property of entity to sort by
        :param str sort_order: Sort order. ASC (ASCENDING) or DESC (DESCENDING)
        :return: PageDataReportTemplateInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'page', 'type_list', 'format_list', 'include_customers', 'text_search', 'sort_property', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_report_template_infos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `get_all_report_template_infos`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_all_report_template_infos`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type_list' in params:
            query_params.append(('typeList', params['type_list']))  # noqa: E501
        if 'format_list' in params:
            query_params.append(('formatList', params['format_list']))  # noqa: E501
        if 'include_customers' in params:
            query_params.append(('includeCustomers', params['include_customers']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'text_search' in params:
            query_params.append(('textSearch', params['text_search']))  # noqa: E501
        if 'sort_property' in params:
            query_params.append(('sortProperty', params['sort_property']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/reportTemplateInfos/all{?typeList,formatList,includeCustomers,pageSize,page,textSearch,sortProperty,sortOrder}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageDataReportTemplateInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_report_template_by_id(self, report_template_id, **kwargs):  # noqa: E501
        """Get Report Template (getReportTemplateById)  # noqa: E501

        Fetch the ReportTemplate object based on the provided report template Id. Report Template extends Report Template Info object and adds 'configuration' - a JSON structure of report template configuration. See the 'Model' tab of the Response Class for more details. Referencing non-existing Report Template Id will cause 'Not Found' error.  Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.   Security check is performed to verify that the user has 'READ' permission for the entity (entities).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_template_by_id(report_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_template_id: A string value representing the report template id. For example, '784f394c-42b6-435a-983c-b7beff2784f9' (required)
        :return: ReportTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_report_template_by_id_with_http_info(report_template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_report_template_by_id_with_http_info(report_template_id, **kwargs)  # noqa: E501
            return data

    def get_report_template_by_id_with_http_info(self, report_template_id, **kwargs):  # noqa: E501
        """Get Report Template (getReportTemplateById)  # noqa: E501

        Fetch the ReportTemplate object based on the provided report template Id. Report Template extends Report Template Info object and adds 'configuration' - a JSON structure of report template configuration. See the 'Model' tab of the Response Class for more details. Referencing non-existing Report Template Id will cause 'Not Found' error.  Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.   Security check is performed to verify that the user has 'READ' permission for the entity (entities).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_template_by_id_with_http_info(report_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_template_id: A string value representing the report template id. For example, '784f394c-42b6-435a-983c-b7beff2784f9' (required)
        :return: ReportTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['report_template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_report_template_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'report_template_id' is set
        if ('report_template_id' not in params or
                params['report_template_id'] is None):
            raise ValueError("Missing the required parameter `report_template_id` when calling `get_report_template_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'report_template_id' in params:
            path_params['reportTemplateId'] = params['report_template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/reportTemplate/{reportTemplateId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_report_template_info_by_id(self, report_template_id, **kwargs):  # noqa: E501
        """Get Report Template Info (getReportTemplateInfoById)  # noqa: E501

        Fetch the ReportTemplateInfo object based on the provided report template Id. Report Templates allows you to create reports according to the report template configuration. Report service uses report template configuration to generate report. See the 'Model' tab of the Response Class for more details. Referencing non-existing Report Template Id will cause 'Not Found' error.  Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.   Security check is performed to verify that the user has 'READ' permission for the entity (entities).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_template_info_by_id(report_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_template_id: A string value representing the report template id. For example, '784f394c-42b6-435a-983c-b7beff2784f9' (required)
        :return: ReportTemplateInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_report_template_info_by_id_with_http_info(report_template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_report_template_info_by_id_with_http_info(report_template_id, **kwargs)  # noqa: E501
            return data

    def get_report_template_info_by_id_with_http_info(self, report_template_id, **kwargs):  # noqa: E501
        """Get Report Template Info (getReportTemplateInfoById)  # noqa: E501

        Fetch the ReportTemplateInfo object based on the provided report template Id. Report Templates allows you to create reports according to the report template configuration. Report service uses report template configuration to generate report. See the 'Model' tab of the Response Class for more details. Referencing non-existing Report Template Id will cause 'Not Found' error.  Available for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.   Security check is performed to verify that the user has 'READ' permission for the entity (entities).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_template_info_by_id_with_http_info(report_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_template_id: A string value representing the report template id. For example, '784f394c-42b6-435a-983c-b7beff2784f9' (required)
        :return: ReportTemplateInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['report_template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_report_template_info_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'report_template_id' is set
        if ('report_template_id' not in params or
                params['report_template_id'] is None):
            raise ValueError("Missing the required parameter `report_template_id` when calling `get_report_template_info_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'report_template_id' in params:
            path_params['reportTemplateId'] = params['report_template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/reportTemplate/info/{reportTemplateId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportTemplateInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_report_templates_by_ids(self, report_template_ids, **kwargs):  # noqa: E501
        """Get report templates by Report Template Ids (getReportTemplatesByIds)  # noqa: E501

        Returns a list of ReportTemplateInfo objects based on the provided ids. Filters the list based on the user permissions.   Available for users with 'TENANT_ADMIN' authority. Security check is performed to verify that the user has 'READ' permission for the entity (entities).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_templates_by_ids(report_template_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_template_ids: A list of report template ids, separated by comma ',' (required)
        :return: list
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_report_templates_by_ids_with_http_info(report_template_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.get_report_templates_by_ids_with_http_info(report_template_ids, **kwargs)  # noqa: E501
            return data

    def get_report_templates_by_ids_with_http_info(self, report_template_ids, **kwargs):  # noqa: E501
        """Get report templates by Report Template Ids (getReportTemplatesByIds)  # noqa: E501

        Returns a list of ReportTemplateInfo objects based on the provided ids. Filters the list based on the user permissions.   Available for users with 'TENANT_ADMIN' authority. Security check is performed to verify that the user has 'READ' permission for the entity (entities).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_templates_by_ids_with_http_info(report_template_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_template_ids: A list of report template ids, separated by comma ',' (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['report_template_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_report_templates_by_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'report_template_ids' is set
        if ('report_template_ids' not in params or
                params['report_template_ids'] is None):
            raise ValueError("Missing the required parameter `report_template_ids` when calling `get_report_templates_by_ids`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'report_template_ids' in params:
            query_params.append(('reportTemplateIds', params['report_template_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/reportTemplates{?reportTemplateIds}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_report_template(self, body, **kwargs):  # noqa: E501
        """Save Report Template (saveReportTemplate)  # noqa: E501

        Creates or Updates report template. Report Template extends Report Template Info object and adds 'configuration' - a JSON structure of report template configuration. See the 'Model' tab of the Response Class for more details. When creating report template, platform generates report template Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created report template id will be present in the response. Specify existing report template id to update the report template. Referencing non-existing report template Id will cause 'Not Found' error. Remove 'id', 'tenantId' and optionally 'customerId' from the request body example (below) to create new Report Template entity.   Available for users with 'TENANT_ADMIN' authority.   Security check is performed to verify that the user has 'WRITE' permission for the entity (entities).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_report_template(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReportTemplate body: (required)
        :return: ReportTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_report_template_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.save_report_template_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def save_report_template_with_http_info(self, body, **kwargs):  # noqa: E501
        """Save Report Template (saveReportTemplate)  # noqa: E501

        Creates or Updates report template. Report Template extends Report Template Info object and adds 'configuration' - a JSON structure of report template configuration. See the 'Model' tab of the Response Class for more details. When creating report template, platform generates report template Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created report template id will be present in the response. Specify existing report template id to update the report template. Referencing non-existing report template Id will cause 'Not Found' error. Remove 'id', 'tenantId' and optionally 'customerId' from the request body example (below) to create new Report Template entity.   Available for users with 'TENANT_ADMIN' authority.   Security check is performed to verify that the user has 'WRITE' permission for the entity (entities).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_report_template_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReportTemplate body: (required)
        :return: ReportTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_report_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `save_report_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/reportTemplate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
