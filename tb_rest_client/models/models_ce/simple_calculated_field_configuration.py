# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard open-source IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 4.2.1
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2025. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import pprint
import re  # noqa: F401

import six

class SimpleCalculatedFieldConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'arguments': 'list',
        'expression': 'str',
        'output': 'Output',
        'use_latest_ts': 'bool'
    }

    attribute_map = {
        'arguments': 'arguments',
        'expression': 'expression',
        'output': 'output',
        'use_latest_ts': 'useLatestTs'
    }

    def __init__(self, arguments=None, expression=None, output=None, use_latest_ts=None):  # noqa: E501
        """SimpleCalculatedFieldConfiguration - a model defined in Swagger"""  # noqa: E501
        self._arguments = None
        self._expression = None
        self._output = None
        self._use_latest_ts = None
        self.discriminator = None
        if arguments is not None:
            self.arguments = arguments
        if expression is not None:
            self.expression = expression
        if output is not None:
            self.output = output
        if use_latest_ts is not None:
            self.use_latest_ts = use_latest_ts

    @property
    def arguments(self):
        """Gets the arguments of this SimpleCalculatedFieldConfiguration.  # noqa: E501


        :return: The arguments of this SimpleCalculatedFieldConfiguration.  # noqa: E501
        :rtype: object
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this SimpleCalculatedFieldConfiguration.


        :param arguments: The arguments of this SimpleCalculatedFieldConfiguration.  # noqa: E501
        :type: object
        """

        self._arguments = arguments

    @property
    def expression(self):
        """Gets the expression of this SimpleCalculatedFieldConfiguration.  # noqa: E501


        :return: The expression of this SimpleCalculatedFieldConfiguration.  # noqa: E501
        :rtype: object
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this SimpleCalculatedFieldConfiguration.


        :param expression: The expression of this SimpleCalculatedFieldConfiguration.  # noqa: E501
        :type: object
        """

        self._expression = expression

    @property
    def output(self):
        """Gets the output of this SimpleCalculatedFieldConfiguration.  # noqa: E501


        :return: The output of this SimpleCalculatedFieldConfiguration.  # noqa: E501
        :rtype: Output
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this SimpleCalculatedFieldConfiguration.


        :param output: The output of this SimpleCalculatedFieldConfiguration.  # noqa: E501
        :type: Output
        """

        self._output = output

    @property
    def use_latest_ts(self):
        """Gets the use_latest_ts of this SimpleCalculatedFieldConfiguration.  # noqa: E501


        :return: The use_latest_ts of this SimpleCalculatedFieldConfiguration.  # noqa: E501
        :rtype: object
        """
        return self._use_latest_ts

    @use_latest_ts.setter
    def use_latest_ts(self, use_latest_ts):
        """Sets the use_latest_ts of this SimpleCalculatedFieldConfiguration.


        :param use_latest_ts: The use_latest_ts of this SimpleCalculatedFieldConfiguration.  # noqa: E501
        :type: object
        """

        self._use_latest_ts = use_latest_ts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimpleCalculatedFieldConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleCalculatedFieldConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
