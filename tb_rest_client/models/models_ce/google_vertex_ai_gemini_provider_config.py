# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard open-source IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 4.2.1
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2025. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import pprint
import re  # noqa: F401

import six

class GoogleVertexAiGeminiProviderConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name': 'str',
        'project_id': 'str',
        'location': 'str',
        'service_account_key': 'str'
    }

    attribute_map = {
        'file_name': 'fileName',
        'project_id': 'projectId',
        'location': 'location',
        'service_account_key': 'serviceAccountKey'
    }

    def __init__(self, file_name=None, project_id=None, location=None, service_account_key=None):  # noqa: E501
        """GoogleVertexAiGeminiProviderConfig - a model defined in Swagger"""  # noqa: E501
        self._file_name = None
        self._project_id = None
        self._location = None
        self._service_account_key = None
        self.discriminator = None
        self.file_name = file_name
        self.project_id = project_id
        self.location = location
        self.service_account_key = service_account_key

    @property
    def file_name(self):
        """Gets the file_name of this GoogleVertexAiGeminiProviderConfig.  # noqa: E501


        :return: The file_name of this GoogleVertexAiGeminiProviderConfig.  # noqa: E501
        :rtype: object
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this GoogleVertexAiGeminiProviderConfig.


        :param file_name: The file_name of this GoogleVertexAiGeminiProviderConfig.  # noqa: E501
        :type: object
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def project_id(self):
        """Gets the project_id of this GoogleVertexAiGeminiProviderConfig.  # noqa: E501


        :return: The project_id of this GoogleVertexAiGeminiProviderConfig.  # noqa: E501
        :rtype: object
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GoogleVertexAiGeminiProviderConfig.


        :param project_id: The project_id of this GoogleVertexAiGeminiProviderConfig.  # noqa: E501
        :type: object
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def location(self):
        """Gets the location of this GoogleVertexAiGeminiProviderConfig.  # noqa: E501


        :return: The location of this GoogleVertexAiGeminiProviderConfig.  # noqa: E501
        :rtype: object
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this GoogleVertexAiGeminiProviderConfig.


        :param location: The location of this GoogleVertexAiGeminiProviderConfig.  # noqa: E501
        :type: object
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def service_account_key(self):
        """Gets the service_account_key of this GoogleVertexAiGeminiProviderConfig.  # noqa: E501


        :return: The service_account_key of this GoogleVertexAiGeminiProviderConfig.  # noqa: E501
        :rtype: object
        """
        return self._service_account_key

    @service_account_key.setter
    def service_account_key(self, service_account_key):
        """Sets the service_account_key of this GoogleVertexAiGeminiProviderConfig.


        :param service_account_key: The service_account_key of this GoogleVertexAiGeminiProviderConfig.  # noqa: E501
        :type: object
        """
        if service_account_key is None:
            raise ValueError("Invalid value for `service_account_key`, must not be `None`")  # noqa: E501

        self._service_account_key = service_account_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GoogleVertexAiGeminiProviderConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoogleVertexAiGeminiProviderConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
