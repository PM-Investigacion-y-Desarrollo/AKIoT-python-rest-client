# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard open-source IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 4.2.1
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2025. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import pprint
import re  # noqa: F401

import six

class TaskResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'success': 'bool',
        'discarded': 'bool',
        'finish_ts': 'int',
        'job_type': 'str'
    }

    attribute_map = {
        'key': 'key',
        'success': 'success',
        'discarded': 'discarded',
        'finish_ts': 'finishTs',
        'job_type': 'jobType'
    }

    discriminator_value_class_map = {
              }

    def __init__(self, key=None, success=None, discarded=None, finish_ts=None, job_type=None):  # noqa: E501
        """TaskResult - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._success = None
        self._discarded = None
        self._finish_ts = None
        self._job_type = None
        self.discriminator = 'jobType'
        if key is not None:
            self.key = key
        if success is not None:
            self.success = success
        if discarded is not None:
            self.discarded = discarded
        if finish_ts is not None:
            self.finish_ts = finish_ts
        self.job_type = job_type

    @property
    def key(self):
        """Gets the key of this TaskResult.  # noqa: E501


        :return: The key of this TaskResult.  # noqa: E501
        :rtype: object
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this TaskResult.


        :param key: The key of this TaskResult.  # noqa: E501
        :type: object
        """

        self._key = key

    @property
    def success(self):
        """Gets the success of this TaskResult.  # noqa: E501


        :return: The success of this TaskResult.  # noqa: E501
        :rtype: object
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this TaskResult.


        :param success: The success of this TaskResult.  # noqa: E501
        :type: object
        """

        self._success = success

    @property
    def discarded(self):
        """Gets the discarded of this TaskResult.  # noqa: E501


        :return: The discarded of this TaskResult.  # noqa: E501
        :rtype: object
        """
        return self._discarded

    @discarded.setter
    def discarded(self, discarded):
        """Sets the discarded of this TaskResult.


        :param discarded: The discarded of this TaskResult.  # noqa: E501
        :type: object
        """

        self._discarded = discarded

    @property
    def finish_ts(self):
        """Gets the finish_ts of this TaskResult.  # noqa: E501


        :return: The finish_ts of this TaskResult.  # noqa: E501
        :rtype: object
        """
        return self._finish_ts

    @finish_ts.setter
    def finish_ts(self, finish_ts):
        """Sets the finish_ts of this TaskResult.


        :param finish_ts: The finish_ts of this TaskResult.  # noqa: E501
        :type: object
        """

        self._finish_ts = finish_ts

    @property
    def job_type(self):
        """Gets the job_type of this TaskResult.  # noqa: E501


        :return: The job_type of this TaskResult.  # noqa: E501
        :rtype: object
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this TaskResult.


        :param job_type: The job_type of this TaskResult.  # noqa: E501
        :type: object
        """
        if job_type is None:
            raise ValueError("Invalid value for `job_type`, must not be `None`")  # noqa: E501

        self._job_type = job_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
