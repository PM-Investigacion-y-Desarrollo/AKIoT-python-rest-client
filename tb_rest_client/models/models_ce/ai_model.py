# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard open-source IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 4.2.1
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2025. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import pprint
import re  # noqa: F401

import six

class AiModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_id': 'TenantId',
        'version': 'str',
        'name': 'str',
        'configuration': 'dict',
        'id': 'AiModelId',
        'created_time': 'int'
    }

    attribute_map = {
        'tenant_id': 'tenantId',
        'version': 'version',
        'name': 'name',
        'configuration': 'configuration',
        'id': 'id',
        'created_time': 'createdTime'
    }

    def __init__(self, tenant_id=None, version=None, name=None, configuration=None, id=None, created_time=None):  # noqa: E501
        """AiModel - a model defined in Swagger"""  # noqa: E501
        self._tenant_id = None
        self._version = None
        self._name = None
        self._configuration = None
        self._id = None
        self._created_time = None
        self.discriminator = None
        self.tenant_id = tenant_id
        self.version = version
        self.name = name
        if configuration is not None:
            self.configuration = configuration
        if id is not None:
            self.id = id
        if created_time is not None:
            self.created_time = created_time

    @property
    def tenant_id(self):
        """Gets the tenant_id of this AiModel.  # noqa: E501

        JSON object representing the ID of the tenant associated with this AI model  # noqa: E501

        :return: The tenant_id of this AiModel.  # noqa: E501
        :rtype: TenantId
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this AiModel.

        JSON object representing the ID of the tenant associated with this AI model  # noqa: E501

        :param tenant_id: The tenant_id of this AiModel.  # noqa: E501
        :type: TenantId
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def version(self):
        """Gets the version of this AiModel.  # noqa: E501

        Version of the AI model record; increments automatically whenever the record is changed  # noqa: E501

        :return: The version of this AiModel.  # noqa: E501
        :rtype: object
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AiModel.

        Version of the AI model record; increments automatically whenever the record is changed  # noqa: E501

        :param version: The version of this AiModel.  # noqa: E501
        :type: object
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def name(self):
        """Gets the name of this AiModel.  # noqa: E501

        Display name for this AI model configuration; not the technical model identifier  # noqa: E501

        :return: The name of this AiModel.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AiModel.

        Display name for this AI model configuration; not the technical model identifier  # noqa: E501

        :param name: The name of this AiModel.  # noqa: E501
        :type: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def configuration(self):
        """Gets the configuration of this AiModel.  # noqa: E501

        Configuration of the AI model  # noqa: E501

        :return: The configuration of this AiModel.  # noqa: E501
        :rtype: object
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this AiModel.

        Configuration of the AI model  # noqa: E501

        :param configuration: The configuration of this AiModel.  # noqa: E501
        :type: object
        """

        self._configuration = configuration

    @property
    def id(self):
        """Gets the id of this AiModel.  # noqa: E501


        :return: The id of this AiModel.  # noqa: E501
        :rtype: AiModelId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AiModel.


        :param id: The id of this AiModel.  # noqa: E501
        :type: AiModelId
        """

        self._id = id

    @property
    def created_time(self):
        """Gets the created_time of this AiModel.  # noqa: E501

        Entity creation timestamp in milliseconds since Unix epoch  # noqa: E501

        :return: The created_time of this AiModel.  # noqa: E501
        :rtype: object
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this AiModel.

        Entity creation timestamp in milliseconds since Unix epoch  # noqa: E501

        :param created_time: The created_time of this AiModel.  # noqa: E501
        :type: object
        """

        self._created_time = created_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AiModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AiModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
