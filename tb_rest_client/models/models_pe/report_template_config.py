# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard Professional Edition IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 4.2.1PE
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2025. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import pprint
import re  # noqa: F401

import six

class ReportTemplateConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filters': 'list',
        'format': 'str',
        'name_pattern': 'str',
        'components': 'list',
        'time_data_pattern': 'str',
        'entity_aliases': 'list'
    }

    attribute_map = {
        'filters': 'filters',
        'format': 'format',
        'name_pattern': 'namePattern',
        'components': 'components',
        'time_data_pattern': 'timeDataPattern',
        'entity_aliases': 'entityAliases'
    }

    discriminator_value_class_map = {
              }

    def __init__(self, filters=None, format=None, name_pattern=None, components=None, time_data_pattern=None, entity_aliases=None):  # noqa: E501
        """ReportTemplateConfig - a model defined in Swagger"""  # noqa: E501
        self._filters = None
        self._format = None
        self._name_pattern = None
        self._components = None
        self._time_data_pattern = None
        self._entity_aliases = None
        self.discriminator = 'format'
        if filters is not None:
            self.filters = filters
        if format is not None:
            self.format = format
        if name_pattern is not None:
            self.name_pattern = name_pattern
        if components is not None:
            self.components = components
        if time_data_pattern is not None:
            self.time_data_pattern = time_data_pattern
        if entity_aliases is not None:
            self.entity_aliases = entity_aliases

    @property
    def filters(self):
        """Gets the filters of this ReportTemplateConfig.  # noqa: E501


        :return: The filters of this ReportTemplateConfig.  # noqa: E501
        :rtype: object
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ReportTemplateConfig.


        :param filters: The filters of this ReportTemplateConfig.  # noqa: E501
        :type: object
        """

        self._filters = filters

    @property
    def format(self):
        """Gets the format of this ReportTemplateConfig.  # noqa: E501


        :return: The format of this ReportTemplateConfig.  # noqa: E501
        :rtype: object
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ReportTemplateConfig.


        :param format: The format of this ReportTemplateConfig.  # noqa: E501
        :type: object
        """

        self._format = format

    @property
    def name_pattern(self):
        """Gets the name_pattern of this ReportTemplateConfig.  # noqa: E501


        :return: The name_pattern of this ReportTemplateConfig.  # noqa: E501
        :rtype: object
        """
        return self._name_pattern

    @name_pattern.setter
    def name_pattern(self, name_pattern):
        """Sets the name_pattern of this ReportTemplateConfig.


        :param name_pattern: The name_pattern of this ReportTemplateConfig.  # noqa: E501
        :type: object
        """

        self._name_pattern = name_pattern

    @property
    def components(self):
        """Gets the components of this ReportTemplateConfig.  # noqa: E501


        :return: The components of this ReportTemplateConfig.  # noqa: E501
        :rtype: object
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this ReportTemplateConfig.


        :param components: The components of this ReportTemplateConfig.  # noqa: E501
        :type: object
        """

        self._components = components

    @property
    def time_data_pattern(self):
        """Gets the time_data_pattern of this ReportTemplateConfig.  # noqa: E501


        :return: The time_data_pattern of this ReportTemplateConfig.  # noqa: E501
        :rtype: object
        """
        return self._time_data_pattern

    @time_data_pattern.setter
    def time_data_pattern(self, time_data_pattern):
        """Sets the time_data_pattern of this ReportTemplateConfig.


        :param time_data_pattern: The time_data_pattern of this ReportTemplateConfig.  # noqa: E501
        :type: object
        """

        self._time_data_pattern = time_data_pattern

    @property
    def entity_aliases(self):
        """Gets the entity_aliases of this ReportTemplateConfig.  # noqa: E501


        :return: The entity_aliases of this ReportTemplateConfig.  # noqa: E501
        :rtype: object
        """
        return self._entity_aliases

    @entity_aliases.setter
    def entity_aliases(self, entity_aliases):
        """Sets the entity_aliases of this ReportTemplateConfig.


        :param entity_aliases: The entity_aliases of this ReportTemplateConfig.  # noqa: E501
        :type: object
        """

        self._entity_aliases = entity_aliases

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportTemplateConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportTemplateConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
